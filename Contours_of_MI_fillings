# -*- coding: utf-8 -*-
"""
Created on Wed Feb 14 17:07:43 2024

@author: Joe
"""
# Required packages
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
#Rests upon the lattice_system class
import SFMI_functions as SF

#For consistency in plot outputs
plt.rc('xtick', labelsize=14)
plt.rc('ytick', labelsize=14)

matplotlib.rcParams['font.family']='serif'
matplotlib.rcParams['mathtext.fontset']='cm'

a = 1064/2

h = 6.626E-34
m = 1837*9.11E-31

Erec = (h**2)/(8*m*(a*10**(-9))**2)

latt = SF.lattice_system(29, 100, 2*a)

U = latt.calculate_U(np.linspace(-4*latt.a_lattice, 4*latt.a_lattice, 800)).real*Erec

# Analytic approximation
#U = np.sqrt(8/np.pi)*(np.pi/(a*10**(-9)))*SF.a_scattering*(34.5)**(3/4)*Erec

J = latt.calculate_J(0, 1).real*Erec
#Analytic approximation
#U = Erec*np.sqrt(8*np.pi)*(7.21E-11/(a*10**(-9)))*(30.1**(3/4))

# Sets up space to create contour plot.
Ns = np.logspace(3, 9, 2000)
freqs = np.logspace(1, 4, 2000)

def get_chempot(N, freq):
    return ((15*N*((a*10**(-9))**3)*(m**(3/2))*U*(freq**3))/(16*np.sqrt(2)*np.pi))**(2/5)

# Additional functions that gets the minimum and maxium values of the width of a Gaussian beam that allow for a unitary filling MI for a given atom population N
#Gets the maximum width
def get_wmax(N):
    Y = 6*J
    X = (15*N*((a*10**(-9))**3)*(m**(3/2))*U/(16*np.sqrt(2)*np.pi))
    return X**(1/3)*(34.5/2)**(1/2)*(h/(m*(a*10**(-9))))*(U-Y)**(-5/6)
#Gets the minimum width
def get_wmin(N):
    Y = 6*J
    X = (15*N*((a*10**(-9))**3)*(m**(3/2))*U/(16*np.sqrt(2)*np.pi))
    return X**(1/3)*(34.5/2)**(1/2)*(h/(m*(a*10**(-9))))*(Y)**(-5/6)
#Outputs these values
print([get_wmax(10**i) for i in range(3, 10)])
print([get_wmin(10**i) for i in range(3, 10)])

#Used as a check of other calculations, gets the 
def get_freq(ratio, N):
    X = (15*N*((a*10**(-9))**3)*(m**(3/2))/(16*np.sqrt(2)*np.pi))
    return X**(-1/3)*U**(1/2)*ratio**(5/6)

#%%
#Finds the ratio chempot/U for each point in the grid
Ratios = np.array([[get_chempot(N, f)/U for N in Ns] for f in freqs])

#Calculates region boundaries up to filling n=6, this can be manually changed here.
top = 1 - 6*J/U
bottom = 1 + 6*J/U
levels_noJ = np.array([0, bottom-1, top, bottom, 2*top, 2*bottom, 3*top, 3*bottom, 4*top, 4*bottom, 5*top, 5*bottom, 6*top])
levels_J = np.array([0, 1, 2, 3, 4, 5, 6])

#%%

fig, ax = plt.subplots() 

ax.set_facecolor('whitesmoke')

#Contour plots for both the colored regions (where J is non-zero) and the boundaries of the maximum MI limit
c1 = plt.contourf(Ns, freqs, Ratios, levels=levels_noJ, colors=np.array(["whitesmoke", (11/255, 99/255, 133/255), "whitesmoke", (167/255, 44/255, 74/255), "whitesmoke", (157/255, 159/255, 99/255), "whitesmoke", (225/255, 127/255, 14/255), "whitesmoke", (148/225, 30/225, 206/225), "whitesmoke", (144/225, 193/225, 63/225), "whitesmoke"], dtype=object))
c2 = plt.contour(Ns, freqs, Ratios, levels=levels_J, colors="black")
fig.colorbar(c1)
ax.set_xlabel(r'N', fontsize=14) 
ax.set_ylabel(r'$\omega_T$', fontsize=16) 
ax.set_yscale('log')
ax.set_xscale('log')
plt.show() 
